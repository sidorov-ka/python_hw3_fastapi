import os
from dotenv import load_dotenv
from sqlalchemy.ext.declarative import declarative_base

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# ‚è¨ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

ASYNC_DATABASE_URL = os.getenv(
    "ASYNC_DATABASE_URL",
    "postgresql+asyncpg://user:password@localhost/dbname"
)

async_engine = create_async_engine(ASYNC_DATABASE_URL, echo=True)

AsyncSessionLocal = sessionmaker(
    bind=async_engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

async def get_async_session() -> AsyncSession:
    async with AsyncSessionLocal() as session:
        yield session

# üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FastAPI Users)
from sqlalchemy import create_engine as sync_create_engine
from sqlalchemy.orm import sessionmaker as sync_sessionmaker

DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql://user:password@localhost/dbname"
)

engine = sync_create_engine(DATABASE_URL)
SessionLocal = sync_sessionmaker(bind=engine, autocommit=False, autoflush=False)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã)
async def init_db():
    async with async_engine.begin() as conn:
        from src.models import Base  # ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç ‚Äî –±–µ–∑–æ–ø–∞—Å–µ–Ω
        await conn.run_sync(Base.metadata.create_all)
